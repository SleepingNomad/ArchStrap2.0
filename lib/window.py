from PyQt6.QtWidgets import *
from PyQt6.QtGui import *
from PyQt6.QtCore import *

import lib.assets.resource_rc


class Ui(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(700, 450)
        icon = QIcon()
        icon.addPixmap(QPixmap(":/ArchStrapIcon.png"), QIcon.Mode.Normal, QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("font: 11pt \"Comfortaa\";\n"
"color: rgb(255, 255, 255);")
        self.MainWidget = QWidget(parent=MainWindow)
        self.MainWidget.setStyleSheet("QWidget#MainWidget {\n"
"    background-image: url(:/15694142_5660786.jpeg);\n"
"}\n"
"\n"
"\n"
"QLineEdit {\n"
"    background-image: url(:/input_field.png);\n"
"    border: 1px solid gray;\n"
"    border-radius: 3px;\n"
"}\n"
"\n"
"QLineEdit::focus {\n"
"    background-image: url(:/input_field.png);\n"
"    border: 1px solid darkgray;\n"
"    border-radius: 3px;\n"
"}\n"
"\n"
"QGroupBox {\n"
"    border: transport;\n"
"}\n"
"QListView::item {\n"
"    background-color: #42466B; \n"
"}\n"
"\n"
"QComboBox {\n"
"    background-image: url(:/input_field.png);\n"
"    border: 1px solid gray;\n"
"    border-radius: 3px;\n"
"    padding: 1px 18px 1px 3px;\n"
"    combobox-popup: 0;\n"
"}\n"
"\n"
"QComboBox:on {\n"
"    padding-top: 3px;\n"
"    padding-left: 4px;\n"
"}\n"
"\n"
"QComboBox::drop-down {\n"
"    subcontrol-origin: padding;\n"
"    subcontrol-position: top right;\n"
"    width: 15px;\n"
"    border-left-width: 1px;\n"
"    border-left-color: transparent;\n"
"    border-left-style: solid; \n"
"    border-radius: 3px;\n"
"}\n"
"\n"
"QComboBox::down-arrow {\n"
"    image: url(:/down_arrow.png);\n"
"    margin-right: 10px;\n"
"}\n"
"\n"
"QComboBox::down-arrow:on {\n"
"    top: 1px;\n"
"    left: 1px;\n"
"}\n"
"\n"
"QPushButton::enabled {\n"
"    border: 1px solid gray;\n"
"    border-radius: 3px;\n"
"    background-image: url(:/input_field.png);\n"
"}\n"
"\n"
"QPushButton::disabled {\n"
"    border: 1px solid gray;\n"
"    border-radius: 3px;\n"
"    background-image: url(:/input_field_disabled.png);\n"
"}\n"
"\n"
"QPushButton::enabled:hover {\n"
"    border: 1px solid darkgray;\n"
"    border-radius: 3px;\n"
"    background-image: url(:/input_field.png);\n"
"}\n"
"\n"
"QTabWidget::pane { \n"
"    border-top: 2px solid rgba(0, 0, 0, 0);\n"
"    position: absolute;\n"
"    top: -0.5em;\n"
"}\n"
"\n"
"QTabWidget::tab-bar {\n"
"    alignment: center;\n"
"}\n"
"\n"
"QTabBar::tab {\n"
"    background: rgba(0, 0, 0, 0);\n"
"    border: 2px solid rgba(0, 0, 0, 0);\n"
"    border-bottom-color: rgba(0, 0, 0, 0); \n"
"    border-top-left-radius: 4px;\n"
"    border-top-right-radius: 4px;\n"
"    min-width: 8ex;\n"
"    padding: 2px;\n"
"}\n"
"\n"
"QTabBar::tab:selected, QTabBar::tab:hover {\n"
"    background: rgba(255, 255, 255, 89)\n"
"}\n"
"\n"
"QTabBar::tab:selected {\n"
"    border-color: #9B9B9B;\n"
"    border-bottom-color: #C2C7CB; \n"
"}\n"
"\n"
"QCheckBox {\n"
"    spacing: 5px;\n"
"}\n"
"\n"
"QCheckBox::indicator {\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator:unchecked {\n"
"    image: url(:/checkBox_unchecked.png);\n"
"}\n"
"\n"
"QCheckBox::indicator:checked {\n"
"    image: url(:/checkBox_checked.png);\n"
"}\n"
"\n"
"")
        self.MainWidget.setObjectName("MainWidget")
        self.verticalLayout = QVBoxLayout(self.MainWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.mainStacked = QStackedWidget(parent=self.MainWidget)
        self.mainStacked.setStyleSheet("QWidget {\n"
"    background-color: transparent;\n"
"}")
        self.mainStacked.setObjectName("mainStacked")
        self.page_welcome = QWidget()
        self.page_welcome.setObjectName("page_welcome")
        self.verticalLayout_2 = QVBoxLayout(self.page_welcome)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        spacerItem = QSpacerItem(20, 70, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.label_welcome = QLabel(parent=self.page_welcome)
        sizePolicy = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_welcome.sizePolicy().hasHeightForWidth())
        self.label_welcome.setSizePolicy(sizePolicy)
        self.label_welcome.setMinimumSize(QSize(0, 150))
        self.label_welcome.setStyleSheet("image: url(:/label.png);")
        self.label_welcome.setText("")
        self.label_welcome.setObjectName("label_welcome")
        self.verticalLayout_2.addWidget(self.label_welcome)
        spacerItem1 = QSpacerItem(20, 69, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem1)
        self.pushButton_start = QPushButton(parent=self.page_welcome)
        sizePolicy = QSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_start.sizePolicy().hasHeightForWidth())
        self.pushButton_start.setSizePolicy(sizePolicy)
        self.pushButton_start.setMinimumSize(QSize(200, 40))
        self.pushButton_start.setMaximumSize(QSize(200, 40))
        self.pushButton_start.setStyleSheet("")
        self.pushButton_start.setObjectName("pushButton_start")
        self.verticalLayout_2.addWidget(self.pushButton_start, 0, Qt.AlignmentFlag.AlignHCenter)
        spacerItem2 = QSpacerItem(20, 70, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem2)
        self.mainStacked.addWidget(self.page_welcome)
        self.page_settings = QWidget()
        self.page_settings.setObjectName("page_settings")
        self.verticalLayoutWidget = QWidget(parent=self.page_settings)
        self.verticalLayoutWidget.setGeometry(QRect(10, 10, 202, 301))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_4 = QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_4.setContentsMargins(0, 15, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_language = QLabel(parent=self.verticalLayoutWidget)
        self.label_language.setObjectName("label_language")
        self.verticalLayout_4.addWidget(self.label_language)
        self.comboBox_language = QComboBox(parent=self.verticalLayoutWidget)
        self.comboBox_language.setMinimumSize(QSize(131, 25))
        self.comboBox_language.setMaximumSize(QSize(200, 25))
        self.comboBox_language.setCurrentText("")
        self.comboBox_language.setMaxCount(999)
        self.comboBox_language.setMaxVisibleItems(10)
        self.comboBox_language.setMinimumContentsLength(2)
        self.comboBox_language.setObjectName("comboBox_language")
        self.verticalLayout_4.addWidget(self.comboBox_language)
        self.label_timezone = QLabel(parent=self.verticalLayoutWidget)
        self.label_timezone.setObjectName("label_timezone")
        self.verticalLayout_4.addWidget(self.label_timezone)
        self.comboBox_timezone = QComboBox(parent=self.verticalLayoutWidget)
        self.comboBox_timezone.setMinimumSize(QSize(131, 25))
        self.comboBox_timezone.setMaximumSize(QSize(200, 25))
        self.comboBox_timezone.setMaxCount(999)
        self.comboBox_timezone.setMinimumContentsLength(2)
        self.comboBox_timezone.setObjectName("comboBox_timezone")
        self.verticalLayout_4.addWidget(self.comboBox_timezone)
        self.label_desktopEnvironment = QLabel(parent=self.verticalLayoutWidget)
        self.label_desktopEnvironment.setObjectName("label_desktopEnvironment")
        self.verticalLayout_4.addWidget(self.label_desktopEnvironment)
        self.comboBox_desktopEnvironment = QComboBox(parent=self.verticalLayoutWidget)
        self.comboBox_desktopEnvironment.setMinimumSize(QSize(131, 25))
        self.comboBox_desktopEnvironment.setMaximumSize(QSize(200, 25))
        self.comboBox_desktopEnvironment.setMaxCount(999)
        self.comboBox_desktopEnvironment.setMinimumContentsLength(2)
        self.comboBox_desktopEnvironment.setIconSize(QSize(24, 24))
        self.comboBox_desktopEnvironment.setObjectName("comboBox_desktopEnvironment")
        self.verticalLayout_4.addWidget(self.comboBox_desktopEnvironment)
        self.label_displayManager = QLabel(parent=self.verticalLayoutWidget)
        self.label_displayManager.setObjectName("label_displayManager")
        self.verticalLayout_4.addWidget(self.label_displayManager)
        self.comboBox_displayManager = QComboBox(parent=self.verticalLayoutWidget)
        self.comboBox_displayManager.setMinimumSize(QSize(131, 25))
        self.comboBox_displayManager.setMaximumSize(QSize(200, 25))
        self.comboBox_displayManager.setMaxCount(999)
        self.comboBox_displayManager.setMinimumContentsLength(2)
        self.comboBox_displayManager.setIconSize(QSize(24, 24))
        self.comboBox_displayManager.setObjectName("comboBox_displayManager")
        self.verticalLayout_4.addWidget(self.comboBox_displayManager)
        self.label_kernel = QLabel(parent=self.verticalLayoutWidget)
        self.label_kernel.setObjectName("label_kernel")
        self.verticalLayout_4.addWidget(self.label_kernel)
        self.comboBox_kernel = QComboBox(parent=self.verticalLayoutWidget)
        self.comboBox_kernel.setMinimumSize(QSize(131, 25))
        self.comboBox_kernel.setMaximumSize(QSize(200, 25))
        self.comboBox_kernel.setMaxCount(999)
        self.comboBox_kernel.setMinimumContentsLength(2)
        self.comboBox_kernel.setObjectName("comboBox_kernel")
        self.verticalLayout_4.addWidget(self.comboBox_kernel)
        self.horizontalLayoutWidget = QWidget(parent=self.page_settings)
        self.horizontalLayoutWidget.setGeometry(QRect(380, 370, 308, 71))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_exit = QPushButton(parent=self.horizontalLayoutWidget)
        self.pushButton_exit.setMinimumSize(QSize(125, 30))
        self.pushButton_exit.setMaximumSize(QSize(125, 30))
        self.pushButton_exit.setObjectName("pushButton_exit")
        self.horizontalLayout.addWidget(self.pushButton_exit)
        self.pushButton_next = QPushButton(parent=self.horizontalLayoutWidget)
        self.pushButton_next.setEnabled(False)
        self.pushButton_next.setMinimumSize(QSize(125, 30))
        self.pushButton_next.setMaximumSize(QSize(125, 30))
        self.pushButton_next.setObjectName("pushButton_next")
        self.horizontalLayout.addWidget(self.pushButton_next)
        self.verticalLayoutWidget_2 = QWidget(parent=self.page_settings)
        self.verticalLayoutWidget_2.setGeometry(QRect(210, 10, 278, 358))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_5 = QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_5.setContentsMargins(0, 9, 0, 0)
        self.verticalLayout_5.setSpacing(1)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.widget = QWidget(parent=self.verticalLayoutWidget_2)
        self.widget.setObjectName("widget")
        self.verticalLayout_6 = QVBoxLayout(self.widget)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_hostname = QLabel(parent=self.widget)
        self.label_hostname.setObjectName("label_hostname")
        self.verticalLayout_6.addWidget(self.label_hostname)
        self.lineEdit_hostname = QLineEdit(parent=self.widget)
        self.lineEdit_hostname.setMinimumSize(QSize(250, 25))
        self.lineEdit_hostname.setMaximumSize(QSize(250, 25))
        self.lineEdit_hostname.setMaxLength(12)
        self.lineEdit_hostname.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_hostname.setObjectName("lineEdit_hostname")
        self.verticalLayout_6.addWidget(self.lineEdit_hostname)
        self.label_username = QLabel(parent=self.widget)
        self.label_username.setObjectName("label_username")
        self.verticalLayout_6.addWidget(self.label_username)
        self.lineEdit_username = QLineEdit(parent=self.widget)
        self.lineEdit_username.setMinimumSize(QSize(250, 25))
        self.lineEdit_username.setMaximumSize(QSize(250, 25))
        self.lineEdit_username.setMaxLength(12)
        self.lineEdit_username.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_username.setObjectName("lineEdit_username")
        self.verticalLayout_6.addWidget(self.lineEdit_username)
        self.verticalLayout_5.addWidget(self.widget)
        self.groupBox_2 = QGroupBox(parent=self.verticalLayoutWidget_2)
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_8 = QVBoxLayout(self.groupBox_2)
        self.verticalLayout_8.setContentsMargins(10, 20, 10, 0)
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.lineEdit_upasswd = QLineEdit(parent=self.groupBox_2)
        self.lineEdit_upasswd.setMinimumSize(QSize(250, 25))
        self.lineEdit_upasswd.setMaximumSize(QSize(250, 25))
        self.lineEdit_upasswd.setMaxLength(16)
        self.lineEdit_upasswd.setEchoMode(QLineEdit.EchoMode.Password)
        self.lineEdit_upasswd.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_upasswd.setObjectName("lineEdit_upasswd")
        self.verticalLayout_8.addWidget(self.lineEdit_upasswd)
        self.lineEdit_upasswd_confirm = QLineEdit(parent=self.groupBox_2)
        self.lineEdit_upasswd_confirm.setMinimumSize(QSize(250, 25))
        self.lineEdit_upasswd_confirm.setMaximumSize(QSize(250, 25))
        self.lineEdit_upasswd_confirm.setMaxLength(16)
        self.lineEdit_upasswd_confirm.setEchoMode(QLineEdit.EchoMode.Password)
        self.lineEdit_upasswd_confirm.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_upasswd_confirm.setObjectName("lineEdit_upasswd_confirm")
        self.verticalLayout_8.addWidget(self.lineEdit_upasswd_confirm)
        self.verticalLayout_5.addWidget(self.groupBox_2)
        self.groupBox_3 = QGroupBox(parent=self.verticalLayoutWidget_2)
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayout_7 = QVBoxLayout(self.groupBox_3)
        self.verticalLayout_7.setContentsMargins(10, 20, 10, 0)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.lineEdit_rpasswd = QLineEdit(parent=self.groupBox_3)
        self.lineEdit_rpasswd.setMinimumSize(QSize(250, 25))
        self.lineEdit_rpasswd.setMaximumSize(QSize(250, 25))
        self.lineEdit_rpasswd.setMaxLength(16)
        self.lineEdit_rpasswd.setEchoMode(QLineEdit.EchoMode.Password)
        self.lineEdit_rpasswd.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_rpasswd.setObjectName("lineEdit_rpasswd")
        self.verticalLayout_7.addWidget(self.lineEdit_rpasswd)
        self.lineEdit_rpasswd_confirm = QLineEdit(parent=self.groupBox_3)
        self.lineEdit_rpasswd_confirm.setMinimumSize(QSize(250, 25))
        self.lineEdit_rpasswd_confirm.setMaximumSize(QSize(250, 25))
        self.lineEdit_rpasswd_confirm.setMaxLength(16)
        self.lineEdit_rpasswd_confirm.setEchoMode(QLineEdit.EchoMode.Password)
        self.lineEdit_rpasswd_confirm.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_rpasswd_confirm.setObjectName("lineEdit_rpasswd_confirm")
        self.verticalLayout_7.addWidget(self.lineEdit_rpasswd_confirm)
        self.verticalLayout_5.addWidget(self.groupBox_3)
        self.verticalLayoutWidget_3 = QWidget(parent=self.page_settings)
        self.verticalLayoutWidget_3.setGeometry(QRect(489, 10, 202, 180))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_9 = QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_9.setContentsMargins(0, 19, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.label_efi = QLabel(parent=self.verticalLayoutWidget_3)
        self.label_efi.setObjectName("label_efi")
        self.verticalLayout_9.addWidget(self.label_efi)
        self.comboBox_efi = QComboBox(parent=self.verticalLayoutWidget_3)
        self.comboBox_efi.setMinimumSize(QSize(131, 25))
        self.comboBox_efi.setMaximumSize(QSize(200, 25))
        self.comboBox_efi.setMaxCount(999)
        self.comboBox_efi.setMinimumContentsLength(2)
        self.comboBox_efi.setObjectName("comboBox_efi")
        self.verticalLayout_9.addWidget(self.comboBox_efi)
        self.label_swap = QLabel(parent=self.verticalLayoutWidget_3)
        self.label_swap.setObjectName("label_swap")
        self.verticalLayout_9.addWidget(self.label_swap)
        self.comboBox_swap = QComboBox(parent=self.verticalLayoutWidget_3)
        self.comboBox_swap.setMinimumSize(QSize(131, 25))
        self.comboBox_swap.setMaximumSize(QSize(200, 25))
        self.comboBox_swap.setMaxCount(999)
        self.comboBox_swap.setMinimumContentsLength(2)
        self.comboBox_swap.setObjectName("comboBox_swap")
        self.verticalLayout_9.addWidget(self.comboBox_swap)
        self.label_root = QLabel(parent=self.verticalLayoutWidget_3)
        self.label_root.setObjectName("label_root")
        self.verticalLayout_9.addWidget(self.label_root)
        self.comboBox_root = QComboBox(parent=self.verticalLayoutWidget_3)
        self.comboBox_root.setMinimumSize(QSize(131, 25))
        self.comboBox_root.setMaximumSize(QSize(200, 25))
        self.comboBox_root.setMaxCount(999)
        self.comboBox_root.setMinimumContentsLength(2)
        self.comboBox_root.setObjectName("comboBox_root")
        self.verticalLayout_9.addWidget(self.comboBox_root)
        self.mainStacked.addWidget(self.page_settings)
        self.page_optionals = QWidget()
        self.page_optionals.setObjectName("page_optionals")
        self.tabWidget = QTabWidget(parent=self.page_optionals)
        self.tabWidget.setGeometry(QRect(130, 20, 467, 274))
        self.tabWidget.setTabPosition(QTabWidget.TabPosition.North)
        self.tabWidget.setTabShape(QTabWidget.TabShape.Rounded)
        self.tabWidget.setIconSize(QSize(32, 32))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_network = QWidget()
        self.tab_network.setObjectName("tab_network")
        self.horizontalLayout_5 = QHBoxLayout(self.tab_network)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.gridWidget = QWidget(parent=self.tab_network)
        self.gridWidget.setObjectName("gridWidget")
        self.horizontalLayout_3 = QHBoxLayout(self.gridWidget)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.widget_3 = QWidget(parent=self.gridWidget)
        self.widget_3.setObjectName("widget_3")
        self.verticalLayout_11 = QVBoxLayout(self.widget_3)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.checkBox_chrome = QCheckBox(parent=self.widget_3)
        self.checkBox_chrome.setObjectName("checkBox_chrome")
        self.verticalLayout_11.addWidget(self.checkBox_chrome)
        self.checkBox_jdownloader = QCheckBox(parent=self.widget_3)
        self.checkBox_jdownloader.setObjectName("checkBox_jdownloader")
        self.verticalLayout_11.addWidget(self.checkBox_jdownloader)
        self.checkBox_openvpn = QCheckBox(parent=self.widget_3)
        self.checkBox_openvpn.setObjectName("checkBox_openvpn")
        self.verticalLayout_11.addWidget(self.checkBox_openvpn)
        self.checkBox_trojan = QCheckBox(parent=self.widget_3)
        self.checkBox_trojan.setObjectName("checkBox_trojan")
        self.verticalLayout_11.addWidget(self.checkBox_trojan)
        self.checkBox_v2ray = QCheckBox(parent=self.widget_3)
        self.checkBox_v2ray.setObjectName("checkBox_v2ray")
        self.verticalLayout_11.addWidget(self.checkBox_v2ray)
        self.horizontalLayout_3.addWidget(self.widget_3, 0, Qt.AlignmentFlag.AlignTop)
        self.widget_4 = QWidget(parent=self.gridWidget)
        self.widget_4.setObjectName("widget_4")
        self.verticalLayout_12 = QVBoxLayout(self.widget_4)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.checkBox_freenet = QCheckBox(parent=self.widget_4)
        self.checkBox_freenet.setObjectName("checkBox_freenet")
        self.verticalLayout_12.addWidget(self.checkBox_freenet)
        self.checkBox_lokinet = QCheckBox(parent=self.widget_4)
        self.checkBox_lokinet.setObjectName("checkBox_lokinet")
        self.verticalLayout_12.addWidget(self.checkBox_lokinet)
        self.checkBox_thorium = QCheckBox(parent=self.widget_4)
        self.checkBox_thorium.setObjectName("checkBox_thorium")
        self.verticalLayout_12.addWidget(self.checkBox_thorium)
        self.checkBox_tuntox = QCheckBox(parent=self.widget_4)
        self.checkBox_tuntox.setObjectName("checkBox_tuntox")
        self.verticalLayout_12.addWidget(self.checkBox_tuntox)
        self.checkBox_wireguard = QCheckBox(parent=self.widget_4)
        self.checkBox_wireguard.setObjectName("checkBox_wireguard")
        self.verticalLayout_12.addWidget(self.checkBox_wireguard)
        self.horizontalLayout_3.addWidget(self.widget_4, 0, Qt.AlignmentFlag.AlignTop)
        self.widget_2 = QWidget(parent=self.gridWidget)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_10 = QVBoxLayout(self.widget_2)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.checkBox_httperf = QCheckBox(parent=self.widget_2)
        self.checkBox_httperf.setObjectName("checkBox_httperf")
        self.verticalLayout_10.addWidget(self.checkBox_httperf)
        self.checkBox_motrix = QCheckBox(parent=self.widget_2)
        self.checkBox_motrix.setObjectName("checkBox_motrix")
        self.verticalLayout_10.addWidget(self.checkBox_motrix)
        self.checkBox_tor = QCheckBox(parent=self.widget_2)
        self.checkBox_tor.setObjectName("checkBox_tor")
        self.verticalLayout_10.addWidget(self.checkBox_tor)
        self.checkBox_vegeta = QCheckBox(parent=self.widget_2)
        self.checkBox_vegeta.setObjectName("checkBox_vegeta")
        self.verticalLayout_10.addWidget(self.checkBox_vegeta)
        self.checkBox_6tunnel = QCheckBox(parent=self.widget_2)
        self.checkBox_6tunnel.setObjectName("checkBox_6tunnel")
        self.verticalLayout_10.addWidget(self.checkBox_6tunnel)
        self.horizontalLayout_3.addWidget(self.widget_2, 0, Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout_5.addWidget(self.gridWidget)
        icon2 = QIcon()
        icon2.addPixmap(QPixmap(":/network.png"), QIcon.Mode.Normal, QIcon.State.Off)
        self.tabWidget.addTab(self.tab_network, icon2, "")
        self.tab_security = QWidget()
        self.tab_security.setObjectName("tab_security")
        self.horizontalLayout_10 = QHBoxLayout(self.tab_security)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.gridWidget_2 = QWidget(parent=self.tab_security)
        self.gridWidget_2.setObjectName("gridWidget_2")
        self.horizontalLayout_6 = QHBoxLayout(self.gridWidget_2)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.widget_8 = QWidget(parent=self.gridWidget_2)
        self.widget_8.setObjectName("widget_8")
        self.verticalLayout_16 = QVBoxLayout(self.widget_8)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.checkBox_aide = QCheckBox(parent=self.widget_8)
        self.checkBox_aide.setObjectName("checkBox_aide")
        self.verticalLayout_16.addWidget(self.checkBox_aide)
        self.checkBox_gnupg = QCheckBox(parent=self.widget_8)
        self.checkBox_gnupg.setObjectName("checkBox_gnupg")
        self.verticalLayout_16.addWidget(self.checkBox_gnupg)
        self.checkBox_metaplsoit = QCheckBox(parent=self.widget_8)
        self.checkBox_metaplsoit.setObjectName("checkBox_metaplsoit")
        self.verticalLayout_16.addWidget(self.checkBox_metaplsoit)
        self.checkBox_ossec = QCheckBox(parent=self.widget_8)
        self.checkBox_ossec.setObjectName("checkBox_ossec")
        self.verticalLayout_16.addWidget(self.checkBox_ossec)
        self.checkBox_snort = QCheckBox(parent=self.widget_8)
        self.checkBox_snort.setObjectName("checkBox_snort")
        self.verticalLayout_16.addWidget(self.checkBox_snort)
        self.checkBox_tiger = QCheckBox(parent=self.widget_8)
        self.checkBox_tiger.setObjectName("checkBox_tiger")
        self.verticalLayout_16.addWidget(self.checkBox_tiger)
        self.checkBox_zeek = QCheckBox(parent=self.widget_8)
        self.checkBox_zeek.setObjectName("checkBox_zeek")
        self.verticalLayout_16.addWidget(self.checkBox_zeek)
        self.horizontalLayout_6.addWidget(self.widget_8, 0, Qt.AlignmentFlag.AlignTop)
        self.widget_9 = QWidget(parent=self.gridWidget_2)
        self.widget_9.setObjectName("widget_9")
        self.verticalLayout_17 = QVBoxLayout(self.widget_9)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.checkBox_bitwarden = QCheckBox(parent=self.widget_9)
        self.checkBox_bitwarden.setObjectName("checkBox_bitwarden")
        self.verticalLayout_17.addWidget(self.checkBox_bitwarden)
        self.checkBox_kgpg = QCheckBox(parent=self.widget_9)
        self.checkBox_kgpg.setObjectName("checkBox_kgpg")
        self.verticalLayout_17.addWidget(self.checkBox_kgpg)
        self.checkBox_ngrep = QCheckBox(parent=self.widget_9)
        self.checkBox_ngrep.setObjectName("checkBox_ngrep")
        self.verticalLayout_17.addWidget(self.checkBox_ngrep)
        self.checkBox_rootkit = QCheckBox(parent=self.widget_9)
        self.checkBox_rootkit.setObjectName("checkBox_rootkit")
        self.verticalLayout_17.addWidget(self.checkBox_rootkit)
        self.checkBox_sshGuard = QCheckBox(parent=self.widget_9)
        self.checkBox_sshGuard.setObjectName("checkBox_sshGuard")
        self.verticalLayout_17.addWidget(self.checkBox_sshGuard)
        self.checkBox_wireshark = QCheckBox(parent=self.widget_9)
        self.checkBox_wireshark.setObjectName("checkBox_wireshark")
        self.verticalLayout_17.addWidget(self.checkBox_wireshark)
        self.horizontalLayout_6.addWidget(self.widget_9, 0, Qt.AlignmentFlag.AlignTop)
        self.widget_10 = QWidget(parent=self.gridWidget_2)
        self.widget_10.setObjectName("widget_10")
        self.verticalLayout_18 = QVBoxLayout(self.widget_10)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.checkBox_clamav = QCheckBox(parent=self.widget_10)
        self.checkBox_clamav.setObjectName("checkBox_clamav")
        self.verticalLayout_18.addWidget(self.checkBox_clamav)
        self.checkBox_masshash = QCheckBox(parent=self.widget_10)
        self.checkBox_masshash.setObjectName("checkBox_masshash")
        self.verticalLayout_18.addWidget(self.checkBox_masshash)
        self.checkBox_nmap = QCheckBox(parent=self.widget_10)
        self.checkBox_nmap.setObjectName("checkBox_nmap")
        self.verticalLayout_18.addWidget(self.checkBox_nmap)
        self.checkBox_scrypt = QCheckBox(parent=self.widget_10)
        self.checkBox_scrypt.setObjectName("checkBox_scrypt")
        self.verticalLayout_18.addWidget(self.checkBox_scrypt)
        self.checkBox_steghide = QCheckBox(parent=self.widget_10)
        self.checkBox_steghide.setObjectName("checkBox_steghide")
        self.verticalLayout_18.addWidget(self.checkBox_steghide)
        self.checkBox_xplico = QCheckBox(parent=self.widget_10)
        self.checkBox_xplico.setObjectName("checkBox_xplico")
        self.verticalLayout_18.addWidget(self.checkBox_xplico)
        self.horizontalLayout_6.addWidget(self.widget_10, 0, Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout_10.addWidget(self.gridWidget_2)
        icon3 = QIcon()
        icon3.addPixmap(QPixmap(":/security.png"), QIcon.Mode.Normal, QIcon.State.Off)
        self.tabWidget.addTab(self.tab_security, icon3, "")
        self.tab_docs = QWidget()
        self.tab_docs.setObjectName("tab_docs")
        self.horizontalLayout_11 = QHBoxLayout(self.tab_docs)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.gridWidget_3 = QWidget(parent=self.tab_docs)
        self.gridWidget_3.setObjectName("gridWidget_3")
        self.horizontalLayout_7 = QHBoxLayout(self.gridWidget_3)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.widget_11 = QWidget(parent=self.gridWidget_3)
        self.widget_11.setObjectName("widget_11")
        self.verticalLayout_19 = QVBoxLayout(self.widget_11)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.checkBox_abiword = QCheckBox(parent=self.widget_11)
        self.checkBox_abiword.setObjectName("checkBox_abiword")
        self.verticalLayout_19.addWidget(self.checkBox_abiword)
        self.checkBox_gscan2pdf = QCheckBox(parent=self.widget_11)
        self.checkBox_gscan2pdf.setObjectName("checkBox_gscan2pdf")
        self.verticalLayout_19.addWidget(self.checkBox_gscan2pdf)
        self.checkBox_onlyoffice = QCheckBox(parent=self.widget_11)
        self.checkBox_onlyoffice.setObjectName("checkBox_onlyoffice")
        self.verticalLayout_19.addWidget(self.checkBox_onlyoffice)
        self.checkBox_xmond = QCheckBox(parent=self.widget_11)
        self.checkBox_xmond.setObjectName("checkBox_xmond")
        self.verticalLayout_19.addWidget(self.checkBox_xmond)
        self.horizontalLayout_7.addWidget(self.widget_11, 0, Qt.AlignmentFlag.AlignTop)
        self.widget_12 = QWidget(parent=self.gridWidget_3)
        self.widget_12.setObjectName("widget_12")
        self.verticalLayout_20 = QVBoxLayout(self.widget_12)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.checkBox_cherrytree = QCheckBox(parent=self.widget_12)
        self.checkBox_cherrytree.setObjectName("checkBox_cherrytree")
        self.verticalLayout_20.addWidget(self.checkBox_cherrytree)
        self.checkBox_marktext = QCheckBox(parent=self.widget_12)
        self.checkBox_marktext.setObjectName("checkBox_marktext")
        self.verticalLayout_20.addWidget(self.checkBox_marktext)
        self.checkBox_texstudio = QCheckBox(parent=self.widget_12)
        self.checkBox_texstudio.setObjectName("checkBox_texstudio")
        self.verticalLayout_20.addWidget(self.checkBox_texstudio)
        self.horizontalLayout_7.addWidget(self.widget_12, 0, Qt.AlignmentFlag.AlignTop)
        self.widget_13 = QWidget(parent=self.gridWidget_3)
        self.widget_13.setObjectName("widget_13")
        self.verticalLayout_21 = QVBoxLayout(self.widget_13)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.checkBox_geany = QCheckBox(parent=self.widget_13)
        self.checkBox_geany.setObjectName("checkBox_geany")
        self.verticalLayout_21.addWidget(self.checkBox_geany)
        self.checkBox_micro = QCheckBox(parent=self.widget_13)
        self.checkBox_micro.setObjectName("checkBox_micro")
        self.verticalLayout_21.addWidget(self.checkBox_micro)
        self.checkBox_tikzit = QCheckBox(parent=self.widget_13)
        self.checkBox_tikzit.setObjectName("checkBox_tikzit")
        self.verticalLayout_21.addWidget(self.checkBox_tikzit)
        self.horizontalLayout_7.addWidget(self.widget_13, 0, Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout_11.addWidget(self.gridWidget_3)
        icon4 = QIcon()
        icon4.addPixmap(QPixmap(":/docs.png"), QIcon.Mode.Normal, QIcon.State.Off)
        self.tabWidget.addTab(self.tab_docs, icon4, "")
        self.tab_multimedia = QWidget()
        self.tab_multimedia.setObjectName("tab_multimedia")
        self.horizontalLayout_12 = QHBoxLayout(self.tab_multimedia)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.gridWidget_4 = QWidget(parent=self.tab_multimedia)
        self.gridWidget_4.setObjectName("gridWidget_4")
        self.horizontalLayout_8 = QHBoxLayout(self.gridWidget_4)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.widget_14 = QWidget(parent=self.gridWidget_4)
        self.widget_14.setObjectName("widget_14")
        self.verticalLayout_22 = QVBoxLayout(self.widget_14)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.checkBox_birdfont = QCheckBox(parent=self.widget_14)
        self.checkBox_birdfont.setObjectName("checkBox_birdfont")
        self.verticalLayout_22.addWidget(self.checkBox_birdfont)
        self.checkBox_figma = QCheckBox(parent=self.widget_14)
        self.checkBox_figma.setObjectName("checkBox_figma")
        self.verticalLayout_22.addWidget(self.checkBox_figma)
        self.checkBox_imageMagick = QCheckBox(parent=self.widget_14)
        self.checkBox_imageMagick.setObjectName("checkBox_imageMagick")
        self.verticalLayout_22.addWidget(self.checkBox_imageMagick)
        self.checkBox_nomacs = QCheckBox(parent=self.widget_14)
        self.checkBox_nomacs.setObjectName("checkBox_nomacs")
        self.verticalLayout_22.addWidget(self.checkBox_nomacs)
        self.checkBox_wifu2x = QCheckBox(parent=self.widget_14)
        self.checkBox_wifu2x.setObjectName("checkBox_wifu2x")
        self.verticalLayout_22.addWidget(self.checkBox_wifu2x)
        self.horizontalLayout_8.addWidget(self.widget_14, 0, Qt.AlignmentFlag.AlignTop)
        self.widget_15 = QWidget(parent=self.gridWidget_4)
        self.widget_15.setObjectName("widget_15")
        self.verticalLayout_23 = QVBoxLayout(self.widget_15)
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.checkBox_blender = QCheckBox(parent=self.widget_15)
        self.checkBox_blender.setObjectName("checkBox_blender")
        self.verticalLayout_23.addWidget(self.checkBox_blender)
        self.checkBox_gimp = QCheckBox(parent=self.widget_15)
        self.checkBox_gimp.setObjectName("checkBox_gimp")
        self.verticalLayout_23.addWidget(self.checkBox_gimp)
        self.checkBox_impgg = QCheckBox(parent=self.widget_15)
        self.checkBox_impgg.setObjectName("checkBox_impgg")
        self.verticalLayout_23.addWidget(self.checkBox_impgg)
        self.checkBox_snappy = QCheckBox(parent=self.widget_15)
        self.checkBox_snappy.setObjectName("checkBox_snappy")
        self.verticalLayout_23.addWidget(self.checkBox_snappy)
        self.horizontalLayout_8.addWidget(self.widget_15, 0, Qt.AlignmentFlag.AlignTop)
        self.widget_16 = QWidget(parent=self.gridWidget_4)
        self.widget_16.setObjectName("widget_16")
        self.verticalLayout_24 = QVBoxLayout(self.widget_16)
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.checkBox_coulr = QCheckBox(parent=self.widget_16)
        self.checkBox_coulr.setObjectName("checkBox_coulr")
        self.verticalLayout_24.addWidget(self.checkBox_coulr)
        self.checkBox_gwenview = QCheckBox(parent=self.widget_16)
        self.checkBox_gwenview.setObjectName("checkBox_gwenview")
        self.verticalLayout_24.addWidget(self.checkBox_gwenview)
        self.checkBox_inkscape = QCheckBox(parent=self.widget_16)
        self.checkBox_inkscape.setToolTip("")
        self.checkBox_inkscape.setObjectName("checkBox_inkscape")
        self.verticalLayout_24.addWidget(self.checkBox_inkscape)
        self.checkBox_synfig = QCheckBox(parent=self.widget_16)
        self.checkBox_synfig.setObjectName("checkBox_synfig")
        self.verticalLayout_24.addWidget(self.checkBox_synfig)
        self.horizontalLayout_8.addWidget(self.widget_16, 0, Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout_12.addWidget(self.gridWidget_4)
        icon5 = QIcon()
        icon5.addPixmap(QPixmap(":/multimedia.png"), QIcon.Mode.Normal, QIcon.State.Off)
        self.tabWidget.addTab(self.tab_multimedia, icon5, "")
        self.tab_utilities = QWidget()
        self.tab_utilities.setObjectName("tab_utilities")
        self.horizontalLayout_13 = QHBoxLayout(self.tab_utilities)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.gridWidget_5 = QWidget(parent=self.tab_utilities)
        self.gridWidget_5.setObjectName("gridWidget_5")
        self.horizontalLayout_9 = QHBoxLayout(self.gridWidget_5)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.widget_17 = QWidget(parent=self.gridWidget_5)
        self.widget_17.setObjectName("widget_17")
        self.verticalLayout_25 = QVBoxLayout(self.widget_17)
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.checkBox_bazel = QCheckBox(parent=self.widget_17)
        self.checkBox_bazel.setObjectName("checkBox_bazel")
        self.verticalLayout_25.addWidget(self.checkBox_bazel)
        self.checkBox_fontManager = QCheckBox(parent=self.widget_17)
        self.checkBox_fontManager.setObjectName("checkBox_fontManager")
        self.verticalLayout_25.addWidget(self.checkBox_fontManager)
        self.checkBox_kitty = QCheckBox(parent=self.widget_17)
        self.checkBox_kitty.setObjectName("checkBox_kitty")
        self.verticalLayout_25.addWidget(self.checkBox_kitty)
        self.checkBox_miniconda = QCheckBox(parent=self.widget_17)
        self.checkBox_miniconda.setObjectName("checkBox_miniconda")
        self.verticalLayout_25.addWidget(self.checkBox_miniconda)
        self.checkBox_okular = QCheckBox(parent=self.widget_17)
        self.checkBox_okular.setObjectName("checkBox_okular")
        self.verticalLayout_25.addWidget(self.checkBox_okular)
        self.checkBox_vscode = QCheckBox(parent=self.widget_17)
        self.checkBox_vscode.setObjectName("checkBox_vscode")
        self.verticalLayout_25.addWidget(self.checkBox_vscode)
        self.horizontalLayout_9.addWidget(self.widget_17, 0, Qt.AlignmentFlag.AlignTop)
        self.widget_18 = QWidget(parent=self.gridWidget_5)
        self.widget_18.setObjectName("widget_18")
        self.verticalLayout_26 = QVBoxLayout(self.widget_18)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.checkBox_cairo = QCheckBox(parent=self.widget_18)
        self.checkBox_cairo.setObjectName("checkBox_cairo")
        self.verticalLayout_26.addWidget(self.checkBox_cairo)
        self.checkBox_gparted = QCheckBox(parent=self.widget_18)
        self.checkBox_gparted.setObjectName("checkBox_gparted")
        self.verticalLayout_26.addWidget(self.checkBox_gparted)
        self.checkBox_krusader = QCheckBox(parent=self.widget_18)
        self.checkBox_krusader.setObjectName("checkBox_krusader")
        self.verticalLayout_26.addWidget(self.checkBox_krusader)
        self.checkBox_meson = QCheckBox(parent=self.widget_18)
        self.checkBox_meson.setObjectName("checkBox_meson")
        self.verticalLayout_26.addWidget(self.checkBox_meson)
        self.checkBox_rsync = QCheckBox(parent=self.widget_18)
        self.checkBox_rsync.setObjectName("checkBox_rsync")
        self.verticalLayout_26.addWidget(self.checkBox_rsync)
        self.checkBox_xterm = QCheckBox(parent=self.widget_18)
        self.checkBox_xterm.setObjectName("checkBox_xterm")
        self.verticalLayout_26.addWidget(self.checkBox_xterm)
        self.horizontalLayout_9.addWidget(self.widget_18, 0, Qt.AlignmentFlag.AlignTop)
        self.widget_19 = QWidget(parent=self.gridWidget_5)
        self.widget_19.setObjectName("widget_19")
        self.verticalLayout_27 = QVBoxLayout(self.widget_19)
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.checkBox_dolphin = QCheckBox(parent=self.widget_19)
        self.checkBox_dolphin.setObjectName("checkBox_dolphin")
        self.verticalLayout_27.addWidget(self.checkBox_dolphin)
        self.checkBox_gradle = QCheckBox(parent=self.widget_19)
        self.checkBox_gradle.setObjectName("checkBox_gradle")
        self.verticalLayout_27.addWidget(self.checkBox_gradle)
        self.checkBox_latteDock = QCheckBox(parent=self.widget_19)
        self.checkBox_latteDock.setObjectName("checkBox_latteDock")
        self.verticalLayout_27.addWidget(self.checkBox_latteDock)
        self.checkBox_ohMyZsh = QCheckBox(parent=self.widget_19)
        self.checkBox_ohMyZsh.setObjectName("checkBox_ohMyZsh")
        self.verticalLayout_27.addWidget(self.checkBox_ohMyZsh)
        self.checkBox_vmware = QCheckBox(parent=self.widget_19)
        self.checkBox_vmware.setObjectName("checkBox_vmware")
        self.verticalLayout_27.addWidget(self.checkBox_vmware)
        self.checkBox_neofetch = QCheckBox(parent=self.widget_19)
        self.checkBox_neofetch.setObjectName("checkBox_neofetch")
        self.verticalLayout_27.addWidget(self.checkBox_neofetch)
        self.horizontalLayout_9.addWidget(self.widget_19, 0, Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout_13.addWidget(self.gridWidget_5)
        icon6 = QIcon()
        icon6.addPixmap(QPixmap(":/tools.png"), QIcon.Mode.Normal, QIcon.State.Off)
        self.tabWidget.addTab(self.tab_utilities, icon6, "")
        self.horizontalLayoutWidget_2 = QWidget(parent=self.page_optionals)
        self.horizontalLayoutWidget_2.setGeometry(QRect(380, 370, 308, 71))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_back = QPushButton(parent=self.horizontalLayoutWidget_2)
        self.pushButton_back.setMinimumSize(QSize(125, 30))
        self.pushButton_back.setMaximumSize(QSize(125, 30))
        self.pushButton_back.setObjectName("pushButton_back2")
        self.horizontalLayout_2.addWidget(self.pushButton_back)
        self.pushButton_install = QPushButton(parent=self.horizontalLayoutWidget_2)
        self.pushButton_install.setMinimumSize(QSize(125, 30))
        self.pushButton_install.setMaximumSize(QSize(125, 30))
        self.pushButton_install.setObjectName("pushButton_install")
        self.horizontalLayout_2.addWidget(self.pushButton_install)
        self.mainStacked.addWidget(self.page_optionals)
        self.verticalLayout.addWidget(self.mainStacked)
        MainWindow.setCentralWidget(self.MainWidget)
        self.label_welcome.setBuddy(self.pushButton_start)
        self.label_language.setBuddy(self.comboBox_language)
        self.label_timezone.setBuddy(self.comboBox_timezone)
        self.label_desktopEnvironment.setBuddy(self.comboBox_desktopEnvironment)
        self.label_displayManager.setBuddy(self.comboBox_displayManager)
        self.label_kernel.setBuddy(self.comboBox_kernel)
        self.label_hostname.setBuddy(self.lineEdit_hostname)
        self.label_username.setBuddy(self.lineEdit_username)
        self.label_efi.setBuddy(self.comboBox_efi)
        self.label_swap.setBuddy(self.comboBox_swap)
        self.label_root.setBuddy(self.comboBox_root)

        self.retranslateUi(MainWindow)
        self.mainStacked.setCurrentIndex(0)
        self.tabWidget.setCurrentIndex(0)
        QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.pushButton_start, self.comboBox_language)
        MainWindow.setTabOrder(self.comboBox_language, self.comboBox_timezone)
        MainWindow.setTabOrder(self.comboBox_timezone, self.comboBox_desktopEnvironment)
        MainWindow.setTabOrder(self.comboBox_desktopEnvironment, self.comboBox_displayManager)
        MainWindow.setTabOrder(self.comboBox_displayManager, self.comboBox_kernel)
        MainWindow.setTabOrder(self.comboBox_kernel, self.lineEdit_hostname)
        MainWindow.setTabOrder(self.lineEdit_hostname, self.lineEdit_username)
        MainWindow.setTabOrder(self.lineEdit_username, self.lineEdit_upasswd)
        MainWindow.setTabOrder(self.lineEdit_upasswd, self.lineEdit_upasswd_confirm)
        MainWindow.setTabOrder(self.lineEdit_upasswd_confirm, self.lineEdit_rpasswd)
        MainWindow.setTabOrder(self.lineEdit_rpasswd, self.lineEdit_rpasswd_confirm)
        MainWindow.setTabOrder(self.lineEdit_rpasswd_confirm, self.comboBox_efi)
        MainWindow.setTabOrder(self.comboBox_efi, self.comboBox_swap)
        MainWindow.setTabOrder(self.comboBox_swap, self.comboBox_root)
        MainWindow.setTabOrder(self.comboBox_root, self.pushButton_exit)
        MainWindow.setTabOrder(self.pushButton_exit, self.pushButton_next)
        MainWindow.setTabOrder(self.pushButton_next, self.tabWidget)
        MainWindow.setTabOrder(self.tabWidget, self.checkBox_chrome)
        MainWindow.setTabOrder(self.checkBox_chrome, self.checkBox_jdownloader)
        MainWindow.setTabOrder(self.checkBox_jdownloader, self.checkBox_openvpn)
        MainWindow.setTabOrder(self.checkBox_openvpn, self.checkBox_trojan)
        MainWindow.setTabOrder(self.checkBox_trojan, self.checkBox_v2ray)
        MainWindow.setTabOrder(self.checkBox_v2ray, self.checkBox_freenet)
        MainWindow.setTabOrder(self.checkBox_freenet, self.checkBox_lokinet)
        MainWindow.setTabOrder(self.checkBox_lokinet, self.checkBox_thorium)
        MainWindow.setTabOrder(self.checkBox_thorium, self.checkBox_tuntox)
        MainWindow.setTabOrder(self.checkBox_tuntox, self.checkBox_wireguard)
        MainWindow.setTabOrder(self.checkBox_wireguard, self.checkBox_httperf)
        MainWindow.setTabOrder(self.checkBox_httperf, self.checkBox_motrix)
        MainWindow.setTabOrder(self.checkBox_motrix, self.checkBox_tor)
        MainWindow.setTabOrder(self.checkBox_tor, self.checkBox_vegeta)
        MainWindow.setTabOrder(self.checkBox_vegeta, self.checkBox_6tunnel)
        MainWindow.setTabOrder(self.checkBox_6tunnel, self.checkBox_aide)
        MainWindow.setTabOrder(self.checkBox_aide, self.checkBox_gnupg)
        MainWindow.setTabOrder(self.checkBox_gnupg, self.checkBox_metaplsoit)
        MainWindow.setTabOrder(self.checkBox_metaplsoit, self.checkBox_ossec)
        MainWindow.setTabOrder(self.checkBox_ossec, self.checkBox_snort)
        MainWindow.setTabOrder(self.checkBox_snort, self.checkBox_tiger)
        MainWindow.setTabOrder(self.checkBox_tiger, self.checkBox_zeek)
        MainWindow.setTabOrder(self.checkBox_zeek, self.checkBox_bitwarden)
        MainWindow.setTabOrder(self.checkBox_bitwarden, self.checkBox_kgpg)
        MainWindow.setTabOrder(self.checkBox_kgpg, self.checkBox_ngrep)
        MainWindow.setTabOrder(self.checkBox_ngrep, self.checkBox_rootkit)
        MainWindow.setTabOrder(self.checkBox_rootkit, self.checkBox_sshGuard)
        MainWindow.setTabOrder(self.checkBox_sshGuard, self.checkBox_wireshark)
        MainWindow.setTabOrder(self.checkBox_wireshark, self.checkBox_clamav)
        MainWindow.setTabOrder(self.checkBox_clamav, self.checkBox_masshash)
        MainWindow.setTabOrder(self.checkBox_masshash, self.checkBox_nmap)
        MainWindow.setTabOrder(self.checkBox_nmap, self.checkBox_scrypt)
        MainWindow.setTabOrder(self.checkBox_scrypt, self.checkBox_steghide)
        MainWindow.setTabOrder(self.checkBox_steghide, self.checkBox_xplico)
        MainWindow.setTabOrder(self.checkBox_xplico, self.checkBox_abiword)
        MainWindow.setTabOrder(self.checkBox_abiword, self.checkBox_gscan2pdf)
        MainWindow.setTabOrder(self.checkBox_gscan2pdf, self.checkBox_onlyoffice)
        MainWindow.setTabOrder(self.checkBox_onlyoffice, self.checkBox_xmond)
        MainWindow.setTabOrder(self.checkBox_xmond, self.checkBox_cherrytree)
        MainWindow.setTabOrder(self.checkBox_cherrytree, self.checkBox_marktext)
        MainWindow.setTabOrder(self.checkBox_marktext, self.checkBox_texstudio)
        MainWindow.setTabOrder(self.checkBox_texstudio, self.checkBox_geany)
        MainWindow.setTabOrder(self.checkBox_geany, self.checkBox_micro)
        MainWindow.setTabOrder(self.checkBox_micro, self.checkBox_tikzit)
        MainWindow.setTabOrder(self.checkBox_tikzit, self.checkBox_birdfont)
        MainWindow.setTabOrder(self.checkBox_birdfont, self.checkBox_figma)
        MainWindow.setTabOrder(self.checkBox_figma, self.checkBox_imageMagick)
        MainWindow.setTabOrder(self.checkBox_imageMagick, self.checkBox_nomacs)
        MainWindow.setTabOrder(self.checkBox_nomacs, self.checkBox_wifu2x)
        MainWindow.setTabOrder(self.checkBox_wifu2x, self.checkBox_blender)
        MainWindow.setTabOrder(self.checkBox_blender, self.checkBox_gimp)
        MainWindow.setTabOrder(self.checkBox_gimp, self.checkBox_impgg)
        MainWindow.setTabOrder(self.checkBox_impgg, self.checkBox_snappy)
        MainWindow.setTabOrder(self.checkBox_snappy, self.checkBox_coulr)
        MainWindow.setTabOrder(self.checkBox_coulr, self.checkBox_gwenview)
        MainWindow.setTabOrder(self.checkBox_gwenview, self.checkBox_inkscape)
        MainWindow.setTabOrder(self.checkBox_inkscape, self.checkBox_synfig)
        MainWindow.setTabOrder(self.checkBox_synfig, self.checkBox_bazel)
        MainWindow.setTabOrder(self.checkBox_bazel, self.checkBox_fontManager)
        MainWindow.setTabOrder(self.checkBox_fontManager, self.checkBox_kitty)
        MainWindow.setTabOrder(self.checkBox_kitty, self.checkBox_miniconda)
        MainWindow.setTabOrder(self.checkBox_miniconda, self.checkBox_okular)
        MainWindow.setTabOrder(self.checkBox_okular, self.checkBox_vscode)
        MainWindow.setTabOrder(self.checkBox_vscode, self.checkBox_cairo)
        MainWindow.setTabOrder(self.checkBox_cairo, self.checkBox_gparted)
        MainWindow.setTabOrder(self.checkBox_gparted, self.checkBox_krusader)
        MainWindow.setTabOrder(self.checkBox_krusader, self.checkBox_meson)
        MainWindow.setTabOrder(self.checkBox_meson, self.checkBox_rsync)
        MainWindow.setTabOrder(self.checkBox_rsync, self.checkBox_xterm)
        MainWindow.setTabOrder(self.checkBox_xterm, self.checkBox_dolphin)
        MainWindow.setTabOrder(self.checkBox_dolphin, self.checkBox_gradle)
        MainWindow.setTabOrder(self.checkBox_gradle, self.checkBox_latteDock)
        MainWindow.setTabOrder(self.checkBox_latteDock, self.checkBox_ohMyZsh)
        MainWindow.setTabOrder(self.checkBox_ohMyZsh, self.checkBox_vmware)
        MainWindow.setTabOrder(self.checkBox_vmware, self.checkBox_neofetch)
        MainWindow.setTabOrder(self.checkBox_neofetch, self.pushButton_back)
        MainWindow.setTabOrder(self.pushButton_back, self.pushButton_install)

    def retranslateUi(self, MainWindow):
        _translate = QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_start.setText(_translate("MainWindow", "Start"))
        self.label_language.setText(_translate("MainWindow", "Language"))
        self.label_timezone.setText(_translate("MainWindow", "Timezone"))
        self.label_desktopEnvironment.setText(_translate("MainWindow", "Desktop Environment"))
        self.label_displayManager.setText(_translate("MainWindow", "Display Manager"))
        self.comboBox_displayManager.setItemText(0, _translate("MainWindow", "kljlj"))
        self.label_kernel.setText(_translate("MainWindow", "Kernel"))
        self.pushButton_exit.setText(_translate("MainWindow", "Exit"))
        self.pushButton_next.setText(_translate("MainWindow", "Next"))
        self.label_hostname.setText(_translate("MainWindow", "Hostname"))
        self.label_username.setText(_translate("MainWindow", "Username"))
        self.groupBox_2.setTitle(_translate("MainWindow", "User Password"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Root Password´"))
        self.label_efi.setText(_translate("MainWindow", "EFI Partition"))
        self.label_swap.setText(_translate("MainWindow", "Swap Partition"))
        self.label_root.setText(_translate("MainWindow", "Root Partition"))
        self.checkBox_chrome.setToolTip(_translate("MainWindow", "<html><head/><body><p>Proprietary web browser developed by Google</p></body></html>"))
        self.checkBox_chrome.setText(_translate("MainWindow", "Chrome"))
        self.checkBox_jdownloader.setToolTip(_translate("MainWindow", "<html><head/><body><p>Java-based downloader for one-click hosting sites</p></body></html>"))
        self.checkBox_jdownloader.setText(_translate("MainWindow", "JDownloader"))
        self.checkBox_openvpn.setToolTip(_translate("MainWindow", "<html><head/><body><p>To connect to OpenVPN VPNs</p></body></html>"))
        self.checkBox_openvpn.setText(_translate("MainWindow", "OpenVPN"))
        self.checkBox_trojan.setToolTip(_translate("MainWindow", "<html><head/><body><p>An unidentifiable mechanism that helps you bypass GFW</p></body></html>"))
        self.checkBox_trojan.setText(_translate("MainWindow", "Trojan"))
        self.checkBox_v2ray.setToolTip(_translate("MainWindow", "<html><head/><body><p>V2Ray is the core of Project V, which is a set of tools to help you build your own privacy network over the internet</p></body></html>"))
        self.checkBox_v2ray.setText(_translate("MainWindow", "V2Ray"))
        self.checkBox_freenet.setToolTip(_translate("MainWindow", "<html><head/><body><p>An encrypted network without censorship</p></body></html>"))
        self.checkBox_freenet.setText(_translate("MainWindow", "Freenet"))
        self.checkBox_lokinet.setToolTip(_translate("MainWindow", "<html><head/><body><p>Anonymous, decentralized and IP based overlay network for the internet</p></body></html>"))
        self.checkBox_lokinet.setText(_translate("MainWindow", "Lokinet"))
        self.checkBox_thorium.setToolTip(_translate("MainWindow", "<html><head/><body><p>Thorium develops a periodically synchronized fork of the Chromium browser, expanded with additional patches to optimize performance, improve usability and enhance security. According to the developers\' tests Thorium is 8-40% ahead of the regular Chromium, mainly due to the inclusion of additional optimizations during compilation</p></body></html>"))
        self.checkBox_thorium.setText(_translate("MainWindow", "Thorium"))
        self.checkBox_tuntox.setToolTip(_translate("MainWindow", "<html><head/><body><p>Tunnel TCP connections over the Tox protocol</p></body></html>"))
        self.checkBox_tuntox.setText(_translate("MainWindow", "Tuntox"))
        self.checkBox_wireguard.setToolTip(_translate("MainWindow", "<html><head/><body><p>Next generation secure network tunnel</p></body></html>"))
        self.checkBox_wireguard.setText(_translate("MainWindow", "WireGuard"))
        self.checkBox_httperf.setToolTip(_translate("MainWindow", "<html><head/><body><p>Can generate various HTTP workloads, written in C</p></body></html>"))
        self.checkBox_httperf.setText(_translate("MainWindow", "httperf"))
        self.checkBox_motrix.setToolTip(_translate("MainWindow", "<html><head/><body><p>Full-featured download manager that supports downloading HTTP, FTP, BitTorrent, Magnet, etc. Based on the Electron platform</p></body></html>"))
        self.checkBox_motrix.setText(_translate("MainWindow", "Motrix"))
        self.checkBox_tor.setToolTip(_translate("MainWindow", "<html><head/><body><p>Anonymizing overlay network</p></body></html>"))
        self.checkBox_tor.setText(_translate("MainWindow", "Tor"))
        self.checkBox_vegeta.setToolTip(_translate("MainWindow", "<html><head/><body><p>HTTP load testing tool, written in Go</p></body></html>"))
        self.checkBox_vegeta.setText(_translate("MainWindow", "Vegeta"))
        self.checkBox_6tunnel.setToolTip(_translate("MainWindow", "<html><head/><body><p>Tunnels IPv6 connections for IPv4-only applications</p></body></html>"))
        self.checkBox_6tunnel.setText(_translate("MainWindow", "6tunnel"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tab_network), _translate("MainWindow", "Network Applications"))
        self.checkBox_aide.setToolTip(_translate("MainWindow", "<html><head/><body><p>File and directory integrity checker</p></body></html>"))
        self.checkBox_aide.setText(_translate("MainWindow", "AIDE"))
        self.checkBox_gnupg.setToolTip(_translate("MainWindow", "<html><head/><body><p>The GNU project\'s complete and free implementation of the OpenPGP standard as defined by RFC4880. Free and Open Source replacement of PGP, mostly used for digital signing of packages</p></body></html>"))
        self.checkBox_gnupg.setText(_translate("MainWindow", "GnuPG"))
        self.checkBox_metaplsoit.setToolTip(_translate("MainWindow", "<html><head/><body><p>An advanced open-source platform for developing, testing, and using exploit code</p></body></html>"))
        self.checkBox_metaplsoit.setText(_translate("MainWindow", "Metasploit"))
        self.checkBox_ossec.setToolTip(_translate("MainWindow", "<html><head/><body><p>Open Source Host-based Intrusion Detection System that performs log analysis, file integrity checking, policy monitoring, rootkit detection, real-time alerting and active response</p></body></html>"))
        self.checkBox_ossec.setText(_translate("MainWindow", "OSSEC"))
        self.checkBox_snort.setToolTip(_translate("MainWindow", "<html><head/><body><p>Network intrusion prevention and detection system</p></body></html>"))
        self.checkBox_snort.setText(_translate("MainWindow", "Snort"))
        self.checkBox_tiger.setToolTip(_translate("MainWindow", "<html><head/><body><p>Security tool that can be used both as a security audit and intrusion detection system</p></body></html>"))
        self.checkBox_tiger.setText(_translate("MainWindow", "Tiger"))
        self.checkBox_zeek.setToolTip(_translate("MainWindow", "<html><head/><body><p>Powerful network analysis framework that is much different from the typical IDS you may know</p></body></html>"))
        self.checkBox_zeek.setText(_translate("MainWindow", "Zeek"))
        self.checkBox_bitwarden.setToolTip(_translate("MainWindow", "<html><head/><body><p>Open source password manager with desktop, mobile, browser, and CLI versions. Cloud or self-hosted</p></body></html>"))
        self.checkBox_bitwarden.setText(_translate("MainWindow", "Bitwarden"))
        self.checkBox_kgpg.setToolTip(_translate("MainWindow", "<html><head/><body><p>Simple interface for GnuPG, for KDE</p></body></html>"))
        self.checkBox_kgpg.setText(_translate("MainWindow", "KGpg"))
        self.checkBox_ngrep.setToolTip(_translate("MainWindow", "<html><head/><body><p>grep-like utility that allows you to search for network packets on an interface</p></body></html>"))
        self.checkBox_ngrep.setText(_translate("MainWindow", "Ngrep"))
        self.checkBox_rootkit.setToolTip(_translate("MainWindow", "<html><head/><body><p>Checks machines for the presence of rootkits and other unwanted tools</p></body></html>"))
        self.checkBox_rootkit.setText(_translate("MainWindow", "Rootkit Hunter"))
        self.checkBox_sshGuard.setToolTip(_translate("MainWindow", "<html><head/><body><p>Daemon that protects SSH and other services against brute-force attacks, similar to Fail2ban</p></body></html>"))
        self.checkBox_sshGuard.setText(_translate("MainWindow", "SSH Guard"))
        self.checkBox_wireshark.setToolTip(_translate("MainWindow", "<html><head/><body><p>Network protocol analyzer that lets you capture and interactively browse the traffic running on a computer network</p></body></html>"))
        self.checkBox_wireshark.setText(_translate("MainWindow", "Wireshark"))
        self.checkBox_clamav.setToolTip(_translate("MainWindow", "<html><head/><body><p>Open source antivirus engine for detecting trojans, viruses, malware &amp; other malicious threats</p></body></html>"))
        self.checkBox_clamav.setText(_translate("MainWindow", "ClamAV/Tk"))
        self.checkBox_masshash.setToolTip(_translate("MainWindow", "<html><head/><body><p>A set of file hashing tools (both CLI and GTK GUI) written in Python. Supported algorithms include MD5, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512</p></body></html>"))
        self.checkBox_masshash.setText(_translate("MainWindow", "MassHash"))
        self.checkBox_nmap.setToolTip(_translate("MainWindow", "<html><head/><body><p>Security scanner used to discover hosts and services on a computer network, thus creating a &quot;map&quot; of the network</p></body></html>"))
        self.checkBox_nmap.setText(_translate("MainWindow", "Nmap"))
        self.checkBox_scrypt.setToolTip(_translate("MainWindow", "<html><head/><body><p>Command-line encryption utility featuring the memory-hardened <span style=\" font-family:\'monospace\';\">scrypt</span> key derivation function</p></body></html>"))
        self.checkBox_scrypt.setText(_translate("MainWindow", "Scrypt"))
        self.checkBox_steghide.setToolTip(_translate("MainWindow", "<html><head/><body><p>A steganography utility that is able to hide data in various kinds of image and audio files</p></body></html>"))
        self.checkBox_steghide.setText(_translate("MainWindow", "StegHide"))
        self.checkBox_xplico.setToolTip(_translate("MainWindow", "<html><head/><body><p>Network forensics analysis tool (NFAT), which is a software that reconstructs the contents of acquisitions performed with a packet sniffer</p></body></html>"))
        self.checkBox_xplico.setText(_translate("MainWindow", "Xplico"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tab_security), _translate("MainWindow", "Security Applications"))
        self.checkBox_abiword.setToolTip(_translate("MainWindow", "<html><head/><body><p>Full-featured word processor.</p></body></html>"))
        self.checkBox_abiword.setText(_translate("MainWindow", "Abiword"))
        self.checkBox_gscan2pdf.setToolTip(_translate("MainWindow", "<html><head/><body><p>Scans, runs an OCR engine, minor post-processing, creates a document</p></body></html>"))
        self.checkBox_gscan2pdf.setText(_translate("MainWindow", "gscan2pdf"))
        self.checkBox_onlyoffice.setToolTip(_translate("MainWindow", "<html><head/><body><p>Office suite that combines text, spreadsheet and presentation editors</p></body></html>"))
        self.checkBox_onlyoffice.setText(_translate("MainWindow", "OnlyOffice"))
        self.checkBox_xmond.setToolTip(_translate("MainWindow", "<html><head/><body><p>Brainstorming and mind mapping application. It provides a rich set of different visualization styles, and allows sharing of created mind maps via their website</p></body></html>"))
        self.checkBox_xmond.setText(_translate("MainWindow", "XMind"))
        self.checkBox_cherrytree.setToolTip(_translate("MainWindow", "<html><head/><body><p>Hierarchical note taking application, featuring rich text and syntax highlighting, storing data in a single xml or sqlite file</p></body></html>"))
        self.checkBox_cherrytree.setText(_translate("MainWindow", "Cherrytree"))
        self.checkBox_marktext.setToolTip(_translate("MainWindow", "<html><head/><body><p>Next generation markdown editor. Based on the <a href=\"https://electronjs.org/\"><span style=\" text-decoration: underline; color:#0000ff;\">Electron</span></a> platform</p></body></html>"))
        self.checkBox_marktext.setText(_translate("MainWindow", "Mark Text"))
        self.checkBox_texstudio.setToolTip(_translate("MainWindow", "<html><head/><body><p>Fork of TeXMaker including support for code completion of bibtex items, grammar check and automatic detection of the need for multiple LaTeX runs</p></body></html>"))
        self.checkBox_texstudio.setText(_translate("MainWindow", "TexStudio"))
        self.checkBox_geany.setToolTip(_translate("MainWindow", "<html><head/><body><p>Small and lightweight IDE with many supported many programming and markup languages including C, Java, PHP, HTML, Python, Perl, Pascal</p></body></html>"))
        self.checkBox_geany.setText(_translate("MainWindow", "Geany"))
        self.checkBox_micro.setToolTip(_translate("MainWindow", "<html><head/><body><p>Modern and intuitive terminal-based text editor, written in go and extensible through plugins</p></body></html>"))
        self.checkBox_micro.setText(_translate("MainWindow", "Micro"))
        self.checkBox_tikzit.setToolTip(_translate("MainWindow", "<html><head/><body><p>Graphical tool for rapidly creating graphs and diagrams using PGF/TikZ</p></body></html>"))
        self.checkBox_tikzit.setText(_translate("MainWindow", "TikZiT"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tab_docs), _translate("MainWindow", "Docs & Text Applications"))
        self.checkBox_birdfont.setToolTip(_translate("MainWindow", "<html><head/><body><p>Font editor which lets you create vector graphics and export TTF, EOT and SVG fonts</p></body></html>"))
        self.checkBox_birdfont.setText(_translate("MainWindow", "BirdFont"))
        self.checkBox_figma.setToolTip(_translate("MainWindow", "<html><head/><body><p>Unofficial desktop application for Figma collaborative design tool. Based on the Electron platform</p></body></html>"))
        self.checkBox_figma.setText(_translate("MainWindow", "Figma"))
        self.checkBox_imageMagick.setToolTip(_translate("MainWindow", "<html><head/><body><p>Image Magick</p></body></html>"))
        self.checkBox_imageMagick.setToolTip(_translate("MainWindow", "<html><head/><body><p>Command-line image manipulation program. It is known for its accurate format conversions with support for over 100 formats. Its API enables it to be scripted and it is usually used as a backend processor</p></body></html>"))
        self.checkBox_imageMagick.setText(_translate("MainWindow", "Image M."))
        self.checkBox_nomacs.setToolTip(_translate("MainWindow", "<html><head/><body><p>Qt image viewer. It is feature-rich but starts fast and can be configured to show additional widgets or only the image</p></body></html>"))
        self.checkBox_nomacs.setText(_translate("MainWindow", "nomacs"))
        self.checkBox_wifu2x.setToolTip(_translate("MainWindow", "<html><head/><body><p>Image Super-Resolution for Anime-style art using Deep Convolutional Neural Networks</p></body></html>"))
        self.checkBox_wifu2x.setText(_translate("MainWindow", "Waifu2x"))
        self.checkBox_blender.setToolTip(_translate("MainWindow", "<html><head/><body><p>Fully integrated 3D graphics creation suite with a built-in non-linear video editor</p></body></html>"))
        self.checkBox_blender.setText(_translate("MainWindow", "Blender"))
        self.checkBox_gimp.setToolTip(_translate("MainWindow", "<html><head/><body><p>Set of GIMP plugins for astronomical image processing</p></body></html>"))
        self.checkBox_gimp.setText(_translate("MainWindow", "GIMP"))
        self.checkBox_impgg.setToolTip(_translate("MainWindow", "<html><head/><body><p>performs Lucy-Richardson deconvolution, unsharp masking, brightness normalization and tone curve adjustment</p></body></html>"))
        self.checkBox_impgg.setText(_translate("MainWindow", "imppg"))
        self.checkBox_snappy.setToolTip(_translate("MainWindow", "<html><head/><body><p>Powerful media player with a minimalistic interface that uses GStreamer</p></body></html>"))
        self.checkBox_snappy.setText(_translate("MainWindow", "Snappy"))
        self.checkBox_coulr.setToolTip(_translate("MainWindow", "<html><head/><body><p>Color box to help developers and designers</p></body></html>"))
        self.checkBox_coulr.setText(_translate("MainWindow", "Coulr"))
        self.checkBox_gwenview.setToolTip(_translate("MainWindow", "<html><head/><body><p>Fast and easy to use image viewer for the KDE desktop with optional dependencies for additional format support</p></body></html>"))
        self.checkBox_gwenview.setText(_translate("MainWindow", "GwenView"))
        self.checkBox_inkscape.setToolTip(_translate("MainWindow", "<html><head/><body><p>Vector graphics editor, with capabilities similar to Illustrator, CorelDraw, or Xara X, using the SVG (Scalable Vector Graphics) file format</p></body></html>"))
        self.checkBox_inkscape.setText(_translate("MainWindow", "Inkscape"))
        self.checkBox_synfig.setToolTip(_translate("MainWindow", "<html><head/><body><p>2D animation software, designed as powerful industrial-strength solution for creating film-quality animation using a vector and bitmap artwork</p></body></html>"))
        self.checkBox_synfig.setText(_translate("MainWindow", "Synfig Studio"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tab_multimedia), _translate("MainWindow", "Multimedia Applications"))
        self.checkBox_bazel.setToolTip(_translate("MainWindow", "<html><head/><body><p>An open-source tool that allows for the automated building and testing of software</p></body></html>"))
        self.checkBox_bazel.setText(_translate("MainWindow", "Bazel"))
        self.checkBox_fontManager.setText(_translate("MainWindow", "Font M."))
        self.checkBox_kitty.setToolTip(_translate("MainWindow", "<html><head/><body><p>A modern, hackable, featureful, OpenGL based terminal emulator</p></body></html>"))
        self.checkBox_kitty.setText(_translate("MainWindow", "Kitty"))
        self.checkBox_miniconda.setText(_translate("MainWindow", "Miniconda"))
        self.checkBox_okular.setText(_translate("MainWindow", "Okular"))
        self.checkBox_vscode.setText(_translate("MainWindow", "VSCode"))
        self.checkBox_cairo.setToolTip(_translate("MainWindow", "<html><head/><body><p>Highly customizable dock and launcher application</p></body></html>"))
        self.checkBox_cairo.setText(_translate("MainWindow", "Cairo Dock"))
        self.checkBox_gparted.setText(_translate("MainWindow", "GParted"))
        self.checkBox_krusader.setToolTip(_translate("MainWindow", "<html><head/><body><p>Advanced twin panel (Midnight Commander style) file manager for the KDE desktop</p></body></html>"))
        self.checkBox_krusader.setText(_translate("MainWindow", "Krusader"))
        self.checkBox_meson.setToolTip(_translate("MainWindow", "<html><head/><body><p>Extremely fast and user friendly build system</p></body></html>"))
        self.checkBox_meson.setText(_translate("MainWindow", "Meson"))
        self.checkBox_rsync.setToolTip(_translate("MainWindow", "<html><head/><body><p>File transfer program that uses the &quot;rsync algorithm&quot; which provides a very fast method for bringing remote files into sync. It does this by sending just the differences in the files across the link, without requiring that both sets of files are present at one of the ends of the link beforehand</p></body></html>"))
        self.checkBox_rsync.setText(_translate("MainWindow", "Rsync"))
        self.checkBox_xterm.setToolTip(_translate("MainWindow", "<html><head/><body><p>Simple terminal emulator for the X Window System. It provides DEC VT102 and Tektronix 4014 compatible terminals for programs that cannot use the window system directly</p></body></html>"))
        self.checkBox_xterm.setText(_translate("MainWindow", "Xterm"))
        self.checkBox_dolphin.setToolTip(_translate("MainWindow", "<html><head/><body><p>File manager included in the KDE desktop</p></body></html>"))
        self.checkBox_dolphin.setText(_translate("MainWindow", "Dolphin"))
        self.checkBox_gradle.setToolTip(_translate("MainWindow", "<html><head/><body><p>Powerful build system for the JVM</p></body></html>"))
        self.checkBox_gradle.setText(_translate("MainWindow", "Gradle"))
        self.checkBox_latteDock.setToolTip(_translate("MainWindow", "<html><head/><body><p>Dock based on Plasma frameworks that provides an elegant and intuitive experience for your tasks and plasmoids.</p></body></html>"))
        self.checkBox_latteDock.setText(_translate("MainWindow", "Latte Dock"))
        self.checkBox_ohMyZsh.setText(_translate("MainWindow", "Oh-My-Zsh"))
        self.checkBox_vmware.setText(_translate("MainWindow", "VMWare"))
        self.checkBox_neofetch.setText(_translate("MainWindow", "Neofetch"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tab_utilities), _translate("MainWindow", "Utility Applications"))
        self.pushButton_back.setText(_translate("MainWindow", "Back"))
        self.pushButton_install.setText(_translate("MainWindow", "Install"))
